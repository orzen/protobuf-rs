use std::fmt::Display;
use log::debug;

use crate::error::ParserError;
use crate::token::Token;
use crate::token_stream::TokenStream;
use crate::types::enumerate::Enum;
use crate::types::import::Import;
use crate::types::message::Message;
use crate::types::option_field::OptionField;
use crate::types::package::Package;
use crate::types::service::Service;
use crate::types::syntax::Syntax;

// TODO From for ProtoMember should probably be generated by macro
#[derive(Clone, Debug, PartialEq)]
pub enum ProtoMember {
    Enum(Enum),
    Import(Import),
    Message(Message),
    Option(OptionField),
    Package(Package),
    Service(Service),
}

impl From<Enum> for ProtoMember {
    fn from(value: Enum) -> Self {
        Self::Enum(value)
    }
}

impl From<Import> for ProtoMember {
    fn from(value: Import) -> Self {
        Self::Import(value)
    }
}

impl From<Message> for ProtoMember {
    fn from(value: Message) -> Self {
        Self::Message(value)
    }
}

impl From<OptionField> for ProtoMember {
    fn from(value: OptionField) -> Self {
        Self::Option(value)
    }
}

impl From<Package> for ProtoMember {
    fn from(value: Package) -> Self {
        Self::Package(value)
    }
}

impl From<Service> for ProtoMember {
    fn from(value: Service) -> Self {
        Self::Service(value)
    }
}

impl Display for ProtoMember {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Enum(v) => write!(f, "{}", v),
            Self::Import(v) => write!(f, "{}", v),
            Self::Message(v) => write!(f, "{}", v),
            Self::Option(v) => write!(f, "{}", v),
            Self::Package(v) => write!(f, "{}", v),
            Self::Service(v) => write!(f, "{}", v),
        }
    }
}


#[derive(Clone, Debug, Default, PartialEq)]
pub struct Proto {
    syntax: Syntax,
    package: Package,
    members: Vec<ProtoMember>,
}

impl Proto {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn push(&mut self, member: ProtoMember) {
        self.members.push(member);
    }

    pub fn set_package(&mut self, p: Package) {
        self.package = p;
    }

    pub fn set_syntax(&mut self, s: Syntax) {
        self.syntax = s;
    }
}

impl TryFrom<TokenStream> for Proto {
    type Error = ParserError;

    fn try_from(mut tokens: TokenStream) -> Result<Self, Self::Error> {
        debug!("proto({:?})", tokens);

        let mut proto = Self::new();

        while !tokens.is_empty() {
            // Tokens are order according to expected frequency
            match tokens.last() {
                Some(Token::Message) => {
                    let block = tokens.block(Token::LBrace, Token::RBrace);
                    let message = Message::try_from(block)?;
                    proto.push(ProtoMember::Message(message));
                }
                Some(Token::Service) => {
                    let block = tokens.block(Token::LBrace, Token::RBrace);
                    let service = Service::try_from(block)?;
                    proto.push(ProtoMember::Service(service));
                }
                Some(Token::Enum) => {
                    let block = tokens.block(Token::LBrace, Token::RBrace);
                    let enm = Enum::try_from(block)?;
                    proto.push(ProtoMember::Enum(enm));
                }
                Some(Token::Option) => {
                    let line = tokens.line(Token::Semicolon);
                    let option = OptionField::try_from(line)?;
                    proto.push(ProtoMember::Option(option));
                }
                Some(Token::Import) => {
                    let line = tokens.line(Token::Semicolon);
                    let import = Import::try_from(line)?;
                    proto.push(ProtoMember::Import(import));
                }
                Some(Token::Syntax) => {
                    let tokens = tokens.line(Token::Semicolon);
                    let syntax = Syntax::try_from(tokens)?;
                    proto.set_syntax(syntax);
                }
                Some(Token::Package) => {
                    let tokens = tokens.line(Token::Semicolon);
                    let package = Package::try_from(tokens)?;
                    proto.set_package(package);
                }
                Some(invalid) => unreachable!("invalid token {:?}", invalid),
                None => unreachable!("empty tokens stream"),
            }
        }

        return Ok(proto);
    }
}
